<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="pageHelpers" script:language="StarBasic" script:moduleType="normal">Sub makePageAlbum
	saveVersion("Перед выполнением макроса повоорта страницы в альбомную ориентацию")
	curPageStyleName = getCurPageStyleName()
	If checkPageSettings(curPageStyleName) Then
		MsgBox "Проверьте размеры колонтитулов и перезапустите макрос"
		Exit Sub
	EndIf
	createPageStyleByExample("portrait_" &amp; curPageStyleName)
	rotatePageClockwise(curPageStyleName)	
	saveAndreload()
End Sub

Sub undoPageAlbum
	saveVersion("Перед выполнением макроса отмены преобразования страницы в портретную ориентацию")
	curPageStyleName = getCurPageStyleName()
	If checkPageSettings(curPageStyleName) Then
		MsgBox "Проверьте размеры колонтитулов и перезапустите макрос"
		Exit Sub
	EndIf
	applyPortraitPageStyle(curPageStyleName)
	saveAndreload()
End Sub

sub	applyPortraitPageStyle(pageStyleName)
	Dim pageStyles As Object
	Dim pageStyle As Object
	Dim oViewCursor As Object
	oViewCursor = ThisComponent.CurrentController.getViewCursor()
	breakType = oViewCursor.getPropertyValue("BreakType")
	pageStyles = ThisComponent.StyleFamilies.getByName("PageStyles")
	pageStyle = pageStyles.getByName(pageStyleName)
	If NOT pageStyle.IsLandScape Then
		MsgBox "Страница уже имеет портретную ориентацию. Ничего не делаем. Выходим."
		Exit sub
	EndIf
	If pageStyles.hasByName("portrait_" &amp; pageStyleName) Then
		
		replacePageStyleByPortrait(pageStyleName)
		removeAlbumFrames(pageStyleName)
	'	Globalscope.BasicLibraries.LoadLibrary( "MRILib" )
	Else
		MsgBox "Стиль страницы с портретной ориентацией portrait_" &amp; pageStyleName &amp; " не был найден. "
	EndIf
	
End Sub

Sub replacePageStyleByPortrait(pageStyleName)
	Dim pageStyles As Object
	Dim pageStyle As Object
	Dim oldPageStyle As Object
	pageStyles = ThisComponent.StyleFamilies.getByName("PageStyles")
	oldPageStyle = pageStyles.getByName(pageStyleName)
	For i = 0 To pageStyles.getCount() - 1 
		pageStyle = pageStyles.getByIndex(i)
		If pageStyle.FollowStyle = pageStyleName Then
			pageStyle.FollowStyle = "portrait_" &amp; pageStyleName
		EndIf
		If pageStyle.getName() = "portrait_" &amp; pageStyleName Then
			pageStyle.FollowStyle = oldPageStyle.FollowStyle
		EndIf
	Next i
	pageStyles.getByName("portrait_" &amp; pageStyleName).FollowStyle = oldPageStyle.FollowStyle
	
	'Replace in direct formatting
	textEnumeration = ThisComponent.Text.createEnumeration
	While textEnumeration.hasMoreElements
		enumerationElement = textEnumeration.nextElement
		If enumerationElement.pageDescName = pageStyleName Then
			enumerationElement.pageDescName = "portrait_" &amp; pageStyleName
		EndIf
	Wend
	
	'Replace album style by portrait
	pageStyles.removeByName(pageStyleName)
	pageStyles.getByName("portrait_" &amp; pageStyleName).setName(pageStyleName)
	
End Sub


Sub removeAlbumFrames(pageStyleName)
	Dim drawPagesEnum As Object
	Dim drawPage As Object
	drawPagesEnum = ThisComponent.DrawPage.CreateEnumeration()
	While drawPagesEnum.hasMoreElements()
		drawPage = drawPagesEnum.nextElement()
		If drawPage.getName() = "header_" &amp; pageStyleName Or drawPage.getName() = "footer_" &amp; pageStyleName Then
			drawPage.dispose()
		EndIf
	Wend 
End Sub


Sub rotatePageClockwise(pageStyleName)
	Dim pageStyles As Object
	Dim tmpDimension As Long 
	Dim frame As Object
	Dim frameName As String
	oViewCursor = ThisComponent.CurrentController.getViewCursor()
	pageNumber = oViewCursor.getPage()
	pageStyles = ThisComponent.StyleFamilies.getByName("PageStyles")
	pageStyle = pageStyles.getByName(pageStyleName)
	If pageStyle.IsLandScape Then
		MsgBox "Страница уже имеет альбомную ориентацию. Ничего не делаем. Выходим."
		Exit sub
	EndIf

	If pageStyle.HeaderIsOn Then
		headerFrameW = pageStyle.HeaderHeight - pageStyle.HeaderBodyDistance
		headerFrameH = pageStyle.Width - pageStyle.HeaderLeftMargin - pageStyle.HeaderRightMargin - pageStyle.LeftMargin - pageStyle.RightMargin
		headerFrameYOffset =  pageStyle.HeaderLeftMargin +  pageStyle.LeftMargin
		headerFrameXOffset =  pageStyle.Height - pageStyle.TopMargin - (pageStyle.HeaderHeight - pageStyle.HeaderBodyDistance)
	EndIf
	
	If pageStyle.FooterIsOn Then
		footerFrameW = pageStyle.FooterHeight - pageStyle.FooterBodyDistance
		footerFrameH = pageStyle.Width - pageStyle.FooterLeftMargin - pageStyle.FooterRightMargin - pageStyle.LeftMargin - pageStyle.RightMargin
		footerFrameYOffset =  pageStyle.FooterLeftMargin +  pageStyle.LeftMargin
		footerFrameXOffset =  pageStyle.BottomMargin
	EndIf
	
	rotatePageClockwiseMargins(pageStyle)
	rotatePageOrientation(pageStyle)
		
	If pageStyle.HeaderIsOn Then
		If NOT pageStyle.FirstIsShared Then
			textElement = pageStyle.HeaderTextFirst
		ElseIf NOT pageStyle.HeaderIsShared Then
			If pageNumber Mod 2 = 1 Then
				textElement = pageStyle.HeaderTextRight
			Else
				textElement = pageStyle.HeaderTextLeft
			EndIf		
		Else 
			textElement = pageStyle.HeaderText
		EndIf
		frameName = "header_" &amp; pageStyleName
		copyTextToFrame(textElement,headerFrameXOffset,headerFrameYOffset,headerFrameW,headerFrameH,frameName)
	EndIf
	
	If pageStyle.FooterIsOn Then
		If NOT pageStyle.FirstIsShared Then
			textElement = pageStyle.FooterTextFirst
		ElseIf NOT pageStyle.FooterIsShared Then
			If pageNumber Mod 2 = 1 Then
				textElement = pageStyle.FooterTextRight
			Else
				textElement = pageStyle.FooterTextLeft
			EndIf		
		Else 
			textElement = pageStyle.FooterText
		EndIf
		frameName = "footer_" &amp; pageStyleName
		copyTextToFrame(textElement,footerFrameXOffset,footerFrameYOffset,footerFrameW,footerFrameH,frameName)
	EndIf

	removePageHeader(pageStyle)
	removePageFooter(pageStyle)

End Sub

Sub rotatePageClockwiseMargins(pageStyle)
	Dim tmpDimension As Long 
	tmpDimension = pageStyle.LeftMargin
	If pageStyle.FooterIsOn Then
		pageStyle.LeftMargin = pageStyle.BottomMargin + pageStyle.FooterHeight
	Else
		pageStyle.LeftMargin = pageStyle.BottomMargin
	EndIf
	pageStyle.BottomMargin = pageStyle.RightMargin
	If pageStyle.HeaderIsOn Then
		pageStyle.RightMargin = pageStyle.TopMargin + pageStyle.HeaderHeight
	Else
		pageStyle.RightMargin = pageStyle.TopMargin
	EndIf
	pageStyle.TopMargin = tmpDimension
End Sub

Sub rotatePageOrientation(pageStyle)
	Dim tmpDimension As Long 
	tmpDimension = pageStyle.Height
	pageStyle.Height = pageStyle.Width
	pageStyle.Width = tmpDimension
	pageStyle.IsLandscape = Not pageStyle.IsLandscape
End Sub

Function checkPageSettings(pageStyleName)
	checkPageSettings = false
	pageStyles = ThisComponent.StyleFamilies.getByName("PageStyles")
	pageStyle = pageStyles.getByName(pageStyleName)	
	If pageStyle.HeaderIsOn Then
		If pageStyle.HeaderIsDynamicHeight Then
			checkPageSettings = true
			pageStyle.HeaderIsDynamicHeight = false
			MsgBox "Высота верхнего колонтитула была задана динамической. Отключаем."
		EndIf
		If pageStyle.HeaderDynamicSpacing Then
			checkPageSettings = true
			pageStyle.HeaderDynamicSpacing = false
			MsgBox "Отступ верхнего колонтитула от тела страницы был задан динамическим. Отключаем."
		EndIf
	EndIf
	If pageStyle.FooterIsOn Then
		If pageStyle.FooterIsDynamicHeight Then
			checkPageSettings = true
			pageStyle.FooterIsDynamicHeight = false
			MsgBox "Высота нижнего колонтитула была задана динамической. Отключаем."
		EndIf
		If pageStyle.FooterDynamicSpacing Then
			checkPageSettings = true
			pageStyle.FooterDynamicSpacing = false
			MsgBox "Отступ нижнего колонтитула от тела страницы был задан динамическим. Отключаем."
		EndIf
	EndIf
	'Workaround to force Writer reread new page settings
	If checkPageSettings Then
		pageStyle.FirstIsShared = true
		pageStyle.FirstIsShared = false
		pageStyle.FirstIsShared = true
	EndIf
End Function


Sub copyTextToFrame(textElement,frameXOffset,frameYOffset,frameW,frameH,frameName)
	oViewCursor = ThisComponent.CurrentController.getViewCursor()
	initialCursorPosition = oViewCursor.Text.createTextCursorByRange(oViewCursor.End)
	frame = createFrame(frameXOffset,frameYOffset,frameW,frameH,frameName)
	enumeration = textElement.CreateEnumeration()
	firstElement = true
	While enumeration.hasMoreElements
		element = enumeration.nextElement()
		If element.supportsService("com.sun.star.text.TextTable") Then
		 	cellNames = element.getCellNames()
		 	element.IsWidthRelative = false
		 	firstCellAnchor = element.getCellByName(cellNames(LBound(cellNames))).getStart()
		 	lastCellAnchor = element.getCellByName(cellNames(UBound(cellNames))).getEnd()
		 	oViewCursor.goToRange(firstCellAnchor,false)
			oViewCursor.goToRange(lastCellAnchor,true)
			unoCopy()
			oViewCursor.goToRange(frame.Text.End,false)
			unoPaste()
			If firstElement Then
				frame.Text.CreateEnumeration().nextElement.dispose()
			EndIf
		ElseIf  element.supportsService("com.sun.star.text.Paragraph") Then
			oViewCursor.goToRange(element,false)
			unoCopy()
			oViewCursor.goToRange(frame.Text.End,false)
			unoPaste()
		EndIf
		firstElement = false
	Wend
	oViewCursor.goToRange(initialCursorPosition,false)
End Sub

Sub removePageHeader(pageStyle)
	pageStyle.headerIsOn = false
End Sub

Sub removePageFooter(pageStyle)
	pageStyle.FooterIsOn = false
End Sub

Function getCurPageStyleName()
	dim curPageStyleName as String 
	dim oViewCursor as Object
	dim oTextCursor as Object
	oViewCursor = ThisComponent.CurrentController.getViewCursor()
	'Mri oViewCursor
	If Not oViewCursor.isAtEndOfLine() And Not oViewCursor.isAtStartOfLine()  Then
		oViewCursor.goToStartOfLine(false)
	EndIf
	oTextCursor = oViewCursor.Text.createTextCursorByRange(oViewCursor)
	If oTextCursor.isStartOfParagraph() Then
		getCurPageStyleName = oViewCursor.PageStyleName
		Exit Function
	EndIf
	If oTextCursor.isEndOfParagraph() Then
		getCurPageStyleName = oViewCursor.PageStyleName
		Exit Function
	EndIf
	oViewCursor.Text.insertControlCharacter(oViewCursor.End,com.sun.star.text.ControlCharacter.PARAGRAPH_BREAK,False)
	oViewCursor.paraOrphans = 0
	oViewCursor.paraWidows = 0
	oTextCursor = oViewCursor.Text.createTextCursorByRange(oViewCursor)
	oTextCursor.goRight(1,false)
	oViewCursor.goToRange(oTextCursor,false)
	getCurPageStyleName = oViewCursor.pageStyleName
	oViewCursor.goLeft(1,false)
	backspace()
End Function

Sub unoCopy
	dim document   as object
	dim dispatcher as object
	document   = ThisComponent.CurrentController.Frame
	dispatcher = createUnoService("com.sun.star.frame.DispatchHelper")
	dispatcher.executeDispatch(document, ".uno:Copy", "", 0, Array())
End Sub

sub unoPaste
	dim document   as object
	dim dispatcher as object
	document   = ThisComponent.CurrentController.Frame
	dispatcher = createUnoService("com.sun.star.frame.DispatchHelper")
	dispatcher.executeDispatch(document, ".uno:Paste", "", 0, Array())
end sub

Function createFrame(posX,posY,width,height,frameName)
	Dim oViewCursor as Object
	Dim oTextCursor as Object
	Dim oText As Object
	oViewCursor = ThisComponent.CurrentController.getViewCursor()
	oText = oViewCursor.Text
	oTextCursor = oText.createTextCursorByRange(oViewCursor.End)
	frame = ThisComponent.createInstance("com.sun.star.text.TextFrame")
	frame.AnchorType = 0
	frame.Height = height
	frame.Width = width
	frame.PageToggle = false
	frame.BorderDistance = 0
	frame.HoriOrient = 0
	frame.HoriOrientRelation = 7
	frame.HoriOrientPosition= posX
	frame.VertOrient = 0
	frame.VertOrientRelation = 7
	frame.VertOrientPosition = posY
	oText.insertTextContent(oTextCursor.Start, frame, false)
	frame.FrameIsAutomaticHeight = false
	border = frame.bottomBorder
	border.OuterLineWidth = 0
	border.LineWidth = 0
	frame.bottomBorder = border
	frame.topBorder = border
	frame.leftBorder = border
	frame.rightBorder = border
	frame.WritingMode = 2
	frame.PositionProtected = true
	frame.Name = frameName
	createFrame = frame
End Function

Sub removeEmptyPage

	Dim oViewCursor As Object
	oViewCursor = ThisComponent.CurrentController.getViewCursor()
	oViewCursor.jumpToStartOfPage()
	Dim oTextCursor As Object
	oTextCursor = oViewCursor.Text.createTextCursorByRange(oViewCursor)
	oViewCursor.jumpToEndOfPage()
	oViewCursor.goToRange(oTextCursor,true)
	
	If oViewCursor.isCollapsed Then
		oViewCursor.goLeft(1,false)
		SendRM()
	Else
		oViewCursor.jumpToEndOfPage()
		
	End If
	oViewCursor.collapseToEnd()

End Sub
Function findFirstPageWithStyle(pageStyleName)
	Dim oViewCursor As Object
	Dim curPage As String
	Dim prevPage As String
	oViewCursor = ThisComponent.CurrentController.getViewCursor()
	oViewCursor.jumpToFirstPage()
	curPage = oViewCursor.getPage()
	
	Do While curPage &lt;&gt; prevPage
		curStyleName = oViewCursor.PageStyleName
		If pageStyleName = curStyleName Then
			findFirstPageWithStyle = curPage
			Exit Function
		EndIf
		prevPage = curPage
		oViewCursor.jumpToNextPage()
		curPage = oViewCursor.getPage()
	Loop 
	findFirstPageWithStyle = -1
End Function



Sub createPageStyleByExample(newName)
	dim document   as object
	dim dispatcher as object
	document   = ThisComponent.CurrentController.Frame
	dispatcher = createUnoService("com.sun.star.frame.DispatchHelper")
	dim args1(1) as new com.sun.star.beans.PropertyValue
	args1(0).Name = "Param"
	args1(0).Value = newName
	args1(1).Name = "Family"
	args1(1).Value = 8
	dispatcher.executeDispatch(document, ".uno:StyleNewByExample", "", 0, args1())
end Sub

Sub updateLastPageFields
	Dim enum1Element As Object
	Dim enum1 As Object
	Dim enum2 As Object
	Dim thisPortion As Object
	Dim footnoteText As Object
	Dim label As String
	Dim labelNum As Integer
	Dim i As Integer
	Dim cell As Object
	Dim cellEnum As Object
	Dim cellEnum2 As Object
	Dim pageStyleName As String
	Dim articleName As String
	Dim articleNamePrefix As String	
	Dim articleNamePostfix As String
	Dim strPos As Integer	
	Dim articleNum As Integer
	Dim curNum As Integer
	Dim pageNum As Integer
	Dim textCursor As Object
	Dim lastPages%( 100 )
	For i = 0 to 100
      lastPages%(i) = 0
	next i
	articleNum = 0
	articleName = "0"
	articleNamePrefix = "Статья "
	articleNamePostfix = " "
	Dim statusIndicator as Object
	statusIndicator = ThisComponent.getCurrentController.statusIndicator
	statusIndicator.Start("Производится обновление полей последних номеров страниц, подождите",30)
	enum1 = ThisComponent.Text.createEnumeration
	While enum1.hasMoreElements

		enum1Element = enum1.nextElement
		If enum1Element.supportsService("com.sun.star.text.Paragraph") OR enum1Element.supportsService("com.sun.star.text.TextTable") Then

			pageStyleName = getPageStyleNameFromEnum(enum1Element)

			If Len(pageStyleName) &gt; 0 Then
				strPos = InStr(pageStyleName, articleNamePrefix)
				If strPos &lt;&gt; 0 Then
					articleName = Right(pageStyleName, Len(pageStyleName)-Len(articleNamePrefix))
					strPos = InStr(articleName, articleNamePostfix)
					If strPos &gt; 0 Then
						articleName = Left(articleName,strPos)
					EndIf
					'If first article reached
					If articleNum = 0 Then
						articleNum = CInt(Trim(articleName))
					EndIf				
				Else
					articleName = "0"
				EndIf
				
				If articleNum &gt; 0 Then
					curNum = CInt(Trim(articleName))
					If articleNum &lt;&gt; curNum Then
						textCursor = enum1Element.getText.createTextCursorByRange(enum1Element.Start)
						pageNum = getPageNumber(textCursor)
						lastPages(articleNum) = CInt(pageNum) - 1
						articleNum = curNum						
					EndIf
				EndIf
			EndIf
			
		EndIf
	Wend 
	For i = 0 to 100
      If lastPages%(i) &lt;&gt; 0 Then
      	updateUserField("article" + i + "LastPage",lastPages%(i))
      EndIf
	next i
	statusIndicator.end()
End Sub

Function getPageStyleNameFromEnum(enumElement)
	If enumElement.pageDescName = "" AND Not IsEmpty(enumElement.getPropertyValue("PageStyleName")) Then
		getPageStyleNameFromEnum = enumElement.pageStyleName
	Else 
		getPageStyleNameFromEnum = enumElement.pageDescName
	EndIf
End Function




Function getPageNumber(cursor)
  Dim oField  'Field to insert
  oTextCursor =  cursor.Text.createTextCursorByRange(cursor.Start)
  oField = ThisComponent.createInstance("com.sun.star.text.textfield.PageNumber")
  oField.NumberingType = 4
  oField.SubType = com.sun.star.text.PageNumberType.CURRENT
  oTextCursor.Text.insertTextContent(oTextCursor, oField, False)
  getPageNumber = oField.getPresentation(false)
  oTextCursor.Text.removeTextContent(oField)
End Function 

Sub testPageNum
'  oViewCursor = ThisComponent.CurrentController.getViewCursor()
  updateUserField("fieldName","fieldValueXXX")
End Sub

Function updateUserField(fieldName,fieldValue)
  Dim oFieldMaster As Object
  Dim oMasters As Object
  oMasters = ThisComponent.getTextFieldMasters()
  If oMasters.hasByName("com.sun.star.text.FieldMaster.User" &amp; "." &amp; fieldName) Then
  	oFieldMaster = oMasters.getByName("com.sun.star.text.FieldMaster.User" &amp; "." &amp; fieldName)
  	oFieldMaster.Content = fieldValue
  EndIf
End Function 

Function insertUserField(cursor,fieldName,fieldValue)
  Dim oField  As Object 'Field to insert
  Dim oFieldMaster As Object
  Dim oMasters As Object
  oTextCursor =  cursor.Text.createTextCursorByRange(cursor.Start)
  oField = ThisComponent.createInstance("com.sun.star.text.textfield.User")
  oMasters = ThisComponent.getTextFieldMasters()
  If oMasters.hasByName("com.sun.star.text.FieldMaster.User" &amp; "." &amp; fieldName) Then
  	oFieldMaster = oMasters.getByName("com.sun.star.text.FieldMaster.User" &amp; "." &amp; fieldName)
	oFieldMaster.Name = fieldName
	oFieldMaster.Content = fieldValue
  Else 
	oFieldMaster = ThisComponent.createInstance("com.sun.star.text.FieldMaster.User")
	oFieldMaster.Name = fieldName
	oFieldMaster.Content = fieldValue
  EndIf
  oField.attachTextFieldMaster(oFieldMaster)
  oTextCursor.Text.insertTextContent(oTextCursor, oField, False)
End Function 


</script:module>
