<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="CleanManualFormat" script:language="StarBasic">Sub ExecuteClean
	Dim statusIndicator as Object
	statusIndicator = ThisComponent.getCurrentController.statusIndicator
	statusIndicator.Start("Очистка форматирования начата, подождите",30)

	convertFormattingToText
	
	executeReplaceFonts
	
	ClearDirectFormat
	
	convertFormattingFromText
	
	NotesCleanStyle
	
	executeRemoveUnusedStyles

	statusIndicator.end()
End Sub

Sub NotesCleanStyle
	Dim oDescriptor 'The search descriptor
	dim dispatcher as Object
	dispatcher = createUnoService("com.sun.star.frame.DispatchHelper")
	dim document   as Object
	document   = ThisComponent.CurrentController.Frame
	Dim oViewCursor As Object 'View cursor
	oViewCursor = ThisComponent.CurrentController.getViewCursor()
	allNotes= thisComponent.FootNotes
	for x = 0 to allNotes.Count -1
	  aNote = allNotes.getByIndex(x)
	  aNote.Anchor.CharStyleName="Footnote anchor"
	  oEnum = aNote.Text.createEnumeration()
	  Do While oEnum.hasMoreElements()
	    oCurPar = oEnum.nextElement()
	    oCurPar.ParaStyleName = "Footnote"
	  Loop
	Next
End Sub


Sub getAttINfo
	Dim oViewCursor As Object
	Dim oText
	Dim oTextCursor
	oViewCursor = ThisComponent.CurrentController.getViewCursor()
	oTextCursor = oViewCursor.Text.createTextCursorByRange(oViewCursor)
	MsgBox "CharKerning " &amp; oTextCursor.CharKerning
	'MsgBox "CharBackTransparent " &amp; oTextCursor.CharBackTransparent
End Sub


Sub ReplaceFormatting(SearchString,oReplaceString,SrchAttributes,ReplAttributes, searchStyles)
	Dim oReplace
	oReplace = ThisComponent.createReplaceDescriptor()
	oReplace.SearchString = SearchString
	oReplace.ReplaceString = oReplaceString
	oReplace.SearchRegularExpression=True
	
	oReplace.searchAll=True
	If Not IsEmpty(SrchAttributes(0).Value) Then
	  oReplace.SetSearchAttributes(SrchAttributes())
	  oReplace.searchStyles = searchStyles
	End If
	If Not IsEmpty(ReplAttributes(0).Value) Then
	  oReplace.SetReplaceAttributes(ReplAttributes())
	End If
	ThisComponent.replaceAll(oReplace)
End Sub

Sub convertFormatToEnclosure(identifier, SrchAttributes)
	leftEnclosure = compileLeftEnclosure(identifier)
	rightEnclosure = compileRightEnclosure(identifier)
	Dim oTextCursor As Object
	Dim startTextRange As Object
	Dim endTextRange As Object
	SDesc = Thiscomponent.createSearchDescriptor()
	SDesc.SearchAll = true
	SDesc.SearchRegularExpression = true
	SDesc.SearchString = "(.*)"
	SDesc.searchStyles = true
	SDesc.SetSearchAttributes(SrchAttributes)
	found = Thiscomponent.findFirst(SDesc)
	  Do While not isNull(found)
	  	oTextCursor = found.Text.createTextCursor()
	  	oTextCursor.goToRange(found.Start, false)
	  	oTextCursor.goToRange(found.End, true)
		oTextCursor.collapseToEnd()
		oTextCursor.String = rightEnclosure
		endTextRange = oTextCursor.getEnd()
		oTextCursor.goToRange(found.start,false)
		oTextCursor.String = leftEnclosure
		found = Thiscomponent.findNext(endTextRange, SDesc)
	  Loop
End Sub

Sub convertEnclosuresToFormat(identifier, styleNames, styleValues)
	Dim oTextCursor As Object
	Dim startTextRange As Object
	Dim endTextRange As Object
	Dim leftEnclosure As String
	Dim rightEnclosure As String
	leftEnclosure = compileLeftEnclosure(identifier)
	rightEnclosure = compileRightEnclosure(identifier)
	SDesc = Thiscomponent.createSearchDescriptor()
	SDesc.SearchAll = true
	SDesc.SearchRegularExpression = true
	SDesc.SearchString = leftEnclosure + "(.*?)" + rightEnclosure

	found = Thiscomponent.findFirst(SDesc)
	  Do While not isNull(found)
	  	oTextCursor = found.Text.createTextCursor()
	  	oTextCursor.goToRange(found.Start, false)
	  	oTextCursor.goToRange(found.End, true)
	  	oTextCursor.setPropertyValues(styleNames, styleValues)
	  	oTextCursor.collapseToEnd()
		oTextCursor.goLeft(Len(rightEnclosure), true)
		oTextCursor.String = ""
		endTextRange = oTextCursor.getEnd()
		oTextCursor.goToRange(found.start,false)
		oTextCursor.goRight(Len(leftEnclosure), true)
		oTextCursor.String = ""
		found = Thiscomponent.findNext(endTextRange, SDesc)
	  Loop
End Sub


Function compileSearchString(identifier)
	compileSearchString = CHR(852)+identifier+CHR(853)+"(.*?)"+CHR(854)+identifier+CHR(853)
End Function

Function compileLeftEnclosure(identifier)
	compileLeftEnclosure = CHR(852)+identifier+CHR(853)
End Function

Function compileRightEnclosure(identifier)
	compileRightEnclosure = CHR(854)+identifier+CHR(853)
End Function


Sub toTextBold
	Dim SrchAttributes(0) as new com.sun.star.beans.PropertyValue
	SrchAttributes(0).Name = "CharWeight"
	SrchAttributes(0).Value = com.sun.star.awt.FontWeight.BOLD
	convertFormatToEnclosure(CHR(867), SrchAttributes)
End Sub

Sub fromTextBold
	styleNames = Array("CharWeight")
	styleValues = Array(com.sun.star.awt.FontWeight.BOLD)
	convertEnclosuresToFormat(CHR(867), styleNames, styleValues)
End Sub

Sub toTextItalic
	Dim SrchAttributes(0) as new com.sun.star.beans.PropertyValue
	SrchAttributes(0).Name = "CharPosture"
	SrchAttributes(0).Value = com.sun.star.awt.FontSlant.ITALIC
	convertFormatToEnclosure(CHR(868), SrchAttributes)
End Sub

Sub fromTextItalic
	styleNames = Array("CharPosture")
	styleValues = Array(com.sun.star.awt.FontSlant.ITALIC)
	convertEnclosuresToFormat(CHR(868), styleNames, styleValues)
End Sub

Sub toTextStrikeout
	Dim SrchAttributes(0) as new com.sun.star.beans.PropertyValue
	SrchAttributes(0).Name = "CharStrikeout"
	SrchAttributes(0).Value = com.sun.star.awt.FontStrikeout.SINGLE
	convertFormatToEnclosure(CHR(869), SrchAttributes)

End Sub

Sub fromTextStrikeout
	styleNames = Array("CharStrikeout")
	styleValues = Array(com.sun.star.awt.FontStrikeout.SINGLE)
	convertEnclosuresToFormat(CHR(869), styleNames, styleValues)
End Sub


Sub toTextUnderline
	Dim SrchAttributes(0) as new com.sun.star.beans.PropertyValue
	SrchAttributes(0).Name = "CharUnderline"
	SrchAttributes(0).Value = com.sun.star.awt.FontUnderline.SINGLE
	convertFormatToEnclosure(CHR(870), SrchAttributes)
End Sub

Sub fromTextUnderline
	styleNames = Array("CharUnderline")
	styleValues = Array(com.sun.star.awt.FontUnderline.SINGLE)
	convertEnclosuresToFormat(CHR(870), styleNames, styleValues)
End Sub

Sub toTextSuperscript
	Dim SrchAttributes(1) as new com.sun.star.beans.PropertyValue
	SrchAttributes(0).Name = "CharEscapementHeight"
	SrchAttributes(0).Value = 58
	SrchAttributes(1).Name = "CharEscapement"
	SrchAttributes(1).Value = 101
	convertFormatToEnclosure(CHR(871), SrchAttributes)
End Sub

Sub fromTextSuperscript
	styleNames = Array("CharEscapementHeight","CharEscapement")
	styleValues = Array(58,101)
	convertEnclosuresToFormat(CHR(871), styleNames, styleValues)
End Sub

Sub toTextSubscript
	Dim SrchAttributes(1) as new com.sun.star.beans.PropertyValue
	SrchAttributes(0).Name = "CharEscapementHeight"
	SrchAttributes(0).Value = 58
	SrchAttributes(1).Name = "CharEscapement"
	SrchAttributes(1).Value = -101
	convertFormatToEnclosure(CHR(872), SrchAttributes)
End Sub

Sub fromTextSubscript
	styleNames = Array("CharEscapementHeight","CharEscapement")
	styleValues = Array(58,-101)
	convertEnclosuresToFormat(CHR(872), styleNames, styleValues)
End Sub

Sub toTextSparce
	Dim SrchAttributes(0) as new com.sun.star.beans.PropertyValue
	For i=35 To 71 
		SrchAttributes(0).Name = "CharKerning"
		SrchAttributes(0).Value = i
		convertFormatToEnclosure(CHR(873) &amp; i, SrchAttributes)
	Next
End Sub

Sub fromTextSparce
	styleNames = Array("CharKerning")
	styleValues = "CharKerning"
	oReplaceString = "$1"
	For i=35 To 71 
		styleValues = Array(i)
		convertEnclosuresToFormat(CHR(873) &amp; i, styleNames, styleValues)
	Next 
End Sub


Sub convertFormattingToText
	toTextBold
	toTextItalic
	toTextStrikeout
	toTextUnderline
	toTextSuperscript
	toTextSubscript
	toTextSparce
End Sub

Sub convertFormattingFromText
	fromTextSparce
	fromTextSuperscript
	fromTextSubscript
	fromTextUnderline
	fromTextStrikeout
	fromTextItalic
	fromTextBold
End Sub

'Replaces manual formatting text with font into character style with assigned font
Sub executeReplaceFonts
	Dim oDoc
	oDoc = Thiscomponent
	Dim srch(0) as new com.sun.star.beans.PropertyValue
	SDesc = Thiscomponent.createSearchDescriptor()
	  SDesc.SearchAll = true
	  SDesc.ValueSearch = false
	  SDesc.SearchStyles = false 
	  SDesc.SearchRegularExpression = false
	  SDesc.SearchString = "" 
	  srch(0).Name = "CharFontName"
	  SDesc.SetSearchAttributes(srch())
	  founds = Thiscomponent.findFirst(SDesc)
	  do while not isNull(founds)
	    curFont = founds.CharFontName
	    If curFont &lt;&gt; "IPH Serif" Then
	      If Not DocHasCharStyle(oDoc,curFont) Then
	        oProps() = Array(CreateProperty("CharFontName", curFont))
	        CreateCharacterStyle(curFont, oProps())
	      End If
	      founds.CharStyleNames = Array(curFont)
	    End If
	    founds = Thiscomponent.findNext(founds.getend, SDesc)
	  loop
End Sub

Sub replaceFontToStyle(fontName As String)
	Dim SrchAttributes(0) as new com.sun.star.beans.PropertyValue
	Dim ReplAttributes(0) as new com.sun.star.beans.PropertyValue
	SrchAttributes(0).Name = "CharFontName"
	SrchAttributes(0).Value = fontName
	ReplAttributes(0).Name = "CharStyleName"
	ReplAttributes(0).Value = fontName
	srchString = "(.*)"
	repString = "$1"
	ReplaceFormatting(srchString,repString,SrchAttributes,ReplAttributes)
End Sub


Function CreateProperty( Optional cName As String, Optional uValue ) As com.sun.star.beans.PropertyValue
	Dim oPropertyValue As New com.sun.star.beans.PropertyValue
	If Not IsMissing( cName ) Then
	  oPropertyValue.Name = cName
	EndIf
	If Not IsMissing( uValue ) Then
	  oPropertyValue.Value = uValue
	EndIf
	CreateProperty() = oPropertyValue
End Function

Function DocHasCharStyle(oDoc, sName$) As Boolean
	Dim oStyles
	oStyles = oDoc.StyleFamilies.getByName("CharacterStyles")
	DocHasCharStyle() = oStyles.hasByName(sName)
End Function

Sub CreateCharacterStyle(sStyleName$, oProps())
	Dim i%
	Dim oFamilies
	Dim oStyle
	Dim oStyles
	oFamilies = ThisComponent.StyleFamilies
	oStyles = oFamilies.getByName("CharacterStyles")
	If oStyles.HasByName(sStyleName) Then
	  Exit Sub
	End If
	oStyle = ThisComponent.createInstance("com.sun.star.style.CharacterStyle")
	For i=LBound(oProps) To UBound(oProps)
	  oStyle.setPropertyValue(oProps(i).Name, oProps(i).Value)
	Next
	oStyles.insertByName(sStyleName, oStyle)
End Sub

Sub ClearDirectFormat
	Dim oDescriptor 'The search descriptor
	dim dispatcher as Object
	dispatcher = createUnoService("com.sun.star.frame.DispatchHelper")
	dim document   as Object
	document   = ThisComponent.CurrentController.Frame
	Dim oViewCursor As Object 'View cursor
	oViewCursor = ThisComponent.CurrentController.getViewCursor()
	oViewCursor.gotoStart(false)
	oViewCursor.gotoEnd(true)
	dispatcher.executeDispatch(document, ".uno:ResetAttributes", "", 0, Array())
	footNotes = thisComponent.Footnotes
	For x = 0 to footNotes.Count -1
	  aNote = footNotes.getByIndex(x)
	  footNoteText = aNote.getText()
	  oTextcursor = footNoteText.createTextCursor()
	  oViewCursor.gotoRange(oTextcursor.getStart(),false) 
	  oViewCursor.gotoEnd(true)
	  dispatcher.executeDispatch(document, ".uno:ResetAttributes", "", 0, Array())
	Next
	endNotes = thisComponent.Endnotes
	for x = 0 to endNotes.Count -1
	  aNote = endNotes.getByIndex(x)
	  endNoteText = aNote.getText()
	  oTextcursor = endNoteText.createTextCursor()
	  oViewCursor.gotoRange(oTextcursor.getStart(),false) 
	  oViewCursor.gotoEnd(true)
	  dispatcher.executeDispatch(document, ".uno:ResetAttributes", "", 0, Array())
	next
	
	oViewCursor.gotoStart(false)
End Sub
</script:module>
